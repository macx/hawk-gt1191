---
import '@fontsource-variable/open-sans' // 300-800
import '@fontsource-variable/domine' // 400-700
import '@fontsource-variable/jetbrains-mono' // 100-800

import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import TableOfContent from '../components/TableOfContents.astro'

type Heading = {
  depth: number
  text: string
  slug: string
  subheadings?: Array<Heading>
}

interface Props {
  frontmatter: {
    title: string
    description: string
    keywords?: Array<string>
    toc: boolean
    headings: Array<Heading>
    studipLink: string
    discordLink: string
  }
  headings: Array<Heading>
}

const { frontmatter, headings } = Astro.props as Props

frontmatter.studipLink =
  'https://studip.hawk.de/dispatch.php/course/overview?cid=c50dd549255a9ee526d54fc9b4e6bb47'

frontmatter.discordLink = 'https://discord.gg/9Y9e8XZ'

const toc: boolean =
  typeof frontmatter.toc !== 'undefined' ? frontmatter.toc : false
---

<!doctype html>
<html lang='de'>
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content={frontmatter.description} />
    <meta name='color-scheme' content='dark light' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />

    <link rel='apple-touch-icon' sizes='180x180' href='/apple-touch-icon.png' />
    <link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />
    <link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />

    <link rel='manifest' href='/app.webmanifest' />
    <meta name='msapplication-TileColor' content='#da532c' />
    <meta name='theme-color' content='#ffffff' />

    <title>{frontmatter.title} | HAWK GT 1191</title>
  </head>
  <body id='top'>
    <Header />

    <main aria-role='main'>
      <div class='content'>
        <slot />
      </div>

      {toc && <TableOfContent headings={headings} />}
    </main>

    <Footer />
  </body>
</html>

<style lang='scss' is:global>
  @use 'sass:meta';
  @use '../styles/base/mixins';

  @layer base, content;

  @layer base {
    @include meta.load-css('../styles/base');
  }

  @layer components {
    @include meta.load-css('../styles/components/_media.scss');
  }

  .content {
    font-size: clamp(1rem, 5vw - 1rem, 1.25rem);
    counter-reset: footnotes;

    :is(h1, h2, h3, h4) {
      font-family: var(--ff-headings);
      font-weight: var(--fw-headings);
      font-variation-settings: var(--fvs-headings);

      margin-block: max(2em, var(--sp-content)) 0.5em;
      line-height: var(--lh-s);
    }

    h1 {
      font-size: 2em;
      margin-block: 0 01em;
      text-wrap: balance;
    }

    h2 {
      font-size: 1.6em;
    }

    h3 {
      font-size: 1.2em;
    }

    h4 {
      font-size: 0.8em;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    ul {
      li::marker {
        color: var(--clr-primary);
      }
    }

    dl {
      padding-inline-start: var(--sp);

      dt {
        font-weight: var(--fw-bold);
      }

      dd {
        margin-block-start: 0.2em;
        margin-inline-start: 0;
        font-size: var(--fs-s);

        + dt {
          margin-block-start: 0.8em;
        }
      }
    }

    a:any-link {
      font-weight: var(--fw-bold);
      color: var(--clr-primary);

      text-decoration-line: underline;
      text-decoration-color: var(--clr-primary);
      text-decoration-thickness: 0.1em;
      text-underline-offset: 0.2em;

      background: linear-gradient(
        to top,
        hsl(var(--clr-marker-hsl) / 1) 50%,
        hsl(var(--clr-marker-hsl) / 0)
      );
      background-repeat: no-repeat;
      background-size: 100% 0%;
      background-position: 0 100%;

      &:hover {
        animation: highlight 200ms ease-out forwards;
      }
    }

    @keyframes highlight {
      0% {
        background-size: 100% 0%;
      }
      100% {
        background-size: 100% 100%;
      }
    }

    [aria-describedby='footnote-label'] {
      counter-increment: footnotes;

      &::before {
        content: '[';
      }

      &::after {
        content: ']';
      }
    }
  }

  .footnotes {
    --line-color: var(--clr-line, black);

    margin-block-start: var(--sp-l);
    font-size: var(--fs-s);
    color: var(--clr-text-light);

    &::before {
      display: block;
      content: '';
      inline-size: 10ch;
      block-size: 0;
      border-block-start: 1px solid var(--line-color);
      margin-block-end: var(--sp);
    }

    ol {
      counter-reset: footnotes;
      margin-block: 0;
      padding-inline-start: 0;
    }

    li {
      display: flex;
      counter-increment: footnotes;
      padding: var(--sp-s);

      &::before {
        content: counter(footnotes) '.';
      }

      p {
        margin-block: 0;
        background-image: linear-gradient(
          to top,
          var(--line-color) 33%,
          transparent 0%
        );
        background-position: left;
        background-repeat: repeat-y;
        background-size: 2px 8px;
        padding-inline-start: var(--sp-s);
        margin-inline-start: var(--sp-xs);
      }

      &:target {
        background-color: var(--clr-marker);
        color: var(--clr-text);
      }
    }

    #overlay {
      @include mixins.respond('m', 'to') {
        .with-opened-navigation & {
          position: fixed;
          top: 0;
          right: 0;
          bottom: 0;
          left: 0;
          z-index: 25;
          overflow: hidden;
          background-color: rgba(0, 0, 0, 0.5);
          backdrop-filter: blur(3px);
          pointer-events: none;
        }
      }
    }
  }

  /*
┌──────────────────────────────────┐
TYPO
└──────────────────────────────────┘
*/

  // :is(h1, h2, h3, h4) {
  //   font-family: var(--ff-alt);
  //   font-weight: var(--fw-alt);
  //   margin: 2em 0 0.8em;
  // }

  // h1 {
  //   font-size: 2rem;
  //   margin-top: 0;
  //   transition: font-size var(--transition);

  //   + h2 {
  //     margin-top: 0;
  //   }

  //   @include mixins.respond('l') {
  //     font-size: 2.5rem;
  //   }
  // }

  // h2 {
  //   font-size: 1.5rem;

  //   h1 + & {
  //     margin-top: 0;
  //   }
  // }

  // h3 {
  //   font-size: 1.25rem;
  // }

  // h4 {
  //   font-size: 1rem;
  // }

  // a {
  //   display: inline-block;
  //   color: inherit;
  //   text-decoration: none;
  //   transition: text-decoration var(--transition);

  //   &:hover,
  //   &:focus {
  //     text-decoration: underline;
  //   }

  //   &:focus-visible {
  //     @include mixins.focus();
  //   }
  // }

  /*
┌──────────────────────────────────┐
CONTENT
└──────────────────────────────────┘
*/

  // .stage {
  //   &--with-sections {
  //     max-height: calc(100vh - var(--header-height));
  //     overflow: scroll;
  //     scroll-snap-type: y mandatory;
  //     scroll-behavior: smooth;
  //   }

  //   &__item {
  //     scroll-snap-align: start;
  //     min-height: calc(100vh - 3.75rem);
  //     padding: var(--sp-l) 0 var(--sp-xl);

  //     h2 {
  //       font-size: 1.75rem;
  //       margin: 0 0 0.8em !important;
  //       line-height: 1.3;
  //     }
  //   }

  //   &__navigation {
  //     display: none;
  //   }

  //   @include mixins.respond('l') {
  //     &__navigation {
  //       display: block;
  //       position: fixed;
  //       top: calc(var(--header-height) + var(--sp-l));
  //       left: var(--sp);
  //       width: 10rem;
  //       z-index: 2;
  //       font-size: var(--fs-s);
  //       line-height: var(--lh-s);

  //       h2 {
  //         margin: 0.5rem 0 1rem;
  //         font-size: 0.8125rem;
  //         text-transform: uppercase;
  //         letter--sp: 0.1rem;
  //       }
  //     }
  //   }
  // }

  /*
┌──────────────────────────────────┐
HELPER
└──────────────────────────────────┘
*/

  .new {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    background-color: var(--clr-text);
    color: var(--clr-inverse);
    font-size: var(--fs-xs);
    margin-left: 0.5em;
    padding: 0.2em 0.5em 0;
    border-radius: var(--border-radius);
    cursor: default;
    user-select: none;
  }

  .sr-only {
    position: absolute;
    block-size: 1px;
    inline-size: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    white-space: nowrap;
    border-width: 0;
  }
</style>

<script>
  const codeBlocks = document.querySelectorAll('pre')
  const copyIcon =
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 -960 960 960"><path d="M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z"/></svg>'
  const copiedIcon =
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 -960 960 960"><path d="M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"/></svg>'

  async function copyCode(codeBlock: HTMLElement) {
    let copiedCode = codeBlock.cloneNode(true) as HTMLElement

    // remove copy button
    const copyButton = copiedCode.querySelector('button.copy-code-btn')
    if (!copyButton) return
    copiedCode.removeChild(copyButton as Node)

    const html = copiedCode.outerHTML.replace(/<[^>]*>?/gm, '')
    const codeBlockCopyButton = codeBlock.querySelector('button.copy-code-btn')

    codeBlockCopyButton!.innerHTML = copiedIcon
    setTimeout(function () {
      codeBlockCopyButton!.innerHTML = copyIcon
    }, 2000)

    const parsedHTML = htmlDecode(html)

    if (parsedHTML !== null) {
      await navigator.clipboard.writeText(parsedHTML)
    }
  }

  function htmlDecode(input: string) {
    const doc = new DOMParser().parseFromString(input, 'text/html')
    return doc.documentElement.textContent
  }

  if (codeBlocks.length > 0) {
    codeBlocks.forEach((codeBlock) => {
      if (!navigator.clipboard) {
        return
      }

      let button = document.createElement('button')
      button.className = 'copy-code-btn'
      button.innerHTML = copyIcon
      codeBlock.appendChild(button)

      button.addEventListener('click', async () => {
        await copyCode(codeBlock)
      })
    })
  }
</script>
