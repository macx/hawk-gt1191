---
import '@fontsource-variable/open-sans' // 300-800
import '@fontsource-variable/domine' // 400-700
import '@fontsource-variable/jetbrains-mono' // 100-800

import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import TableOfContent from '../components/TableOfContents.astro'

type Heading = {
  depth: number
  text: string
  slug: string
  subheadings?: Array<Heading>
}

interface Props {
  frontmatter: {
    title: string
    description: string
    keywords?: Array<string>
    toc?: boolean
    headings: Array<Heading>
  }
  headings: Array<Heading>
}

const { frontmatter, headings } = Astro.props as Props

// Get's frontmatter from .md, .mdx and .astro files
const { title, description, keywords, toc } =
  Astro.props.frontmatter || Astro.props
---

<!doctype html>
<html lang='de'>
  <head>
    <meta charset='UTF-8' />
    <title>{title} | HAWK GT 1191</title>
    <meta name='description' content={description} />
    <meta name='color-scheme' content='dark light' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />

    <link rel='apple-touch-icon' sizes='180x180' href='/apple-touch-icon.png' />
    <link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />
    <link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />

    <link rel='manifest' href='/app.webmanifest' />
    <meta name='msapplication-TileColor' content='#da532c' />
    <meta name='theme-color' content='#ffffff' />
  </head>
  <body id='top'>
    <Header />

    <main id='main'>
      <div class='content'>
        <slot />
      </div>

      {toc && <TableOfContent headings={headings} />}
    </main>

    <Footer />
  </body>
</html>

<style lang='scss' is:global>
  @use 'sass:meta';
  @use '../styles/base/mixins';

  @layer base, content, components;

  @layer base {
    @include meta.load-css('../styles/base');
  }

  @layer content {
    @include meta.load-css('../styles/components/_content.scss');
    @include meta.load-css('../styles/components/_footnotes.scss');
  }

  @layer components {
    @include meta.load-css('../styles/components/_media.scss');
  }
</style>

<script>
  const codeBlocks = document.querySelectorAll('pre')
  const copyIcon =
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 -960 960 960"><path d="M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z"/></svg>'
  const copiedIcon =
    '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 -960 960 960"><path d="M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"/></svg>'

  async function copyCode(codeBlock: HTMLElement) {
    let copiedCode = codeBlock.cloneNode(true) as HTMLElement

    // remove copy button
    const copyButton = copiedCode.querySelector('button.copy-code-btn')
    if (!copyButton) return
    copiedCode.removeChild(copyButton as Node)

    const html = copiedCode.outerHTML.replace(/<[^>]*>?/gm, '')
    const codeBlockCopyButton = codeBlock.querySelector('button.copy-code-btn')

    codeBlockCopyButton!.innerHTML = copiedIcon
    setTimeout(function () {
      codeBlockCopyButton!.innerHTML = copyIcon
    }, 2000)

    const parsedHTML = htmlDecode(html)

    if (parsedHTML !== null) {
      await navigator.clipboard.writeText(parsedHTML)
    }
  }

  function htmlDecode(input: string) {
    const doc = new DOMParser().parseFromString(input, 'text/html')
    return doc.documentElement.textContent
  }

  if (codeBlocks.length > 0) {
    codeBlocks.forEach((codeBlock) => {
      if (!navigator.clipboard) {
        return
      }

      let button = document.createElement('button')
      button.className = 'copy-code-btn'
      button.innerHTML = copyIcon
      codeBlock.appendChild(button)

      button.addEventListener('click', async () => {
        await copyCode(codeBlock)
      })
    })
  }
</script>
