---
import '../styles/main.scss'

import AstroFont from '@gamesome/astro-font/AstroFont.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import TableOfContent from '../components/TableOfContents.astro'

type Layout = 'wide' | 'standard'

const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const { headings, layout = 'standard' as Layout } = Astro.props
const {
  title,
  description,
  toc,
  heroImage = '/images/hawk-aussen.jpg'
} = Astro.props.frontmatter || Astro.props
---

<!doctype html>
<html lang='de'>
  <head>
    <!-- Global Metad -->
    <meta charset='UTF-8' />
    <meta name='color-scheme' content='dark light' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <link rel='canonical' href={canonicalURL} />

    <!-- Primary Meta -->
    <title>{title} | HAWK GT 1191</title>
    <meta name='description' content={description} />

    <!-- Fonts -->
    <AstroFont />

    <!-- Icons -->
    <link rel='apple-touch-icon' sizes='180x180' href='/apple-touch-icon.png' />
    <link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />
    <link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />

    <link rel='manifest' href='/app.webmanifest' />
    <meta name='msapplication-TileColor' content='#da532c' />
    <meta name='theme-color' content='#ffffff' />

    <link
      rel='alternate'
      type='application/rss+xml'
      title='RSS Feed'
      href='/rss.xml'
    />
    <link rel='sitemap' href='/sitemap-index.xml' />

    <!-- Open Graph / Facebook -->
    <meta property='og:type' content='website' />
    <meta property='og:url' content={Astro.url} />
    <meta property='og:title' content={title} />
    <meta property='og:description' content={description} />
    <meta property='og:image' content={new URL(heroImage, Astro.url)} />
  </head>
  <body id='top'>
    <Header />

    <main id='main'>
      <div class:list={['content', { wide: layout === 'wide' }]}>
        <slot />
      </div>

      {toc && <TableOfContent headings={headings} />}
    </main>

    <Footer />

    <script>
      const codeBlocks = document.querySelectorAll('pre')
      const copyIcon =
        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 -960 960 960"><path d="M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z"/></svg>'
      const copiedIcon =
        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 -960 960 960"><path d="M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"/></svg>'

      async function copyCode(codeBlock: HTMLElement) {
        let copiedCode = codeBlock.cloneNode(true) as HTMLElement

        // remove copy button
        const copyButton = copiedCode.querySelector('button.copy-code-btn')
        if (!copyButton) return
        copiedCode.removeChild(copyButton as Node)

        const html = copiedCode.outerHTML.replace(/<[^>]*>?/gm, '')
        const codeBlockCopyButton = codeBlock.querySelector(
          'button.copy-code-btn'
        )

        codeBlockCopyButton!.innerHTML = copiedIcon
        setTimeout(function () {
          codeBlockCopyButton!.innerHTML = copyIcon
        }, 2000)

        const parsedHTML = htmlDecode(html)

        if (parsedHTML !== null) {
          await navigator.clipboard.writeText(parsedHTML)
        }
      }

      function htmlDecode(input: string) {
        const doc = new DOMParser().parseFromString(input, 'text/html')
        return doc.documentElement.textContent
      }

      if (codeBlocks.length > 0) {
        codeBlocks.forEach((codeBlock) => {
          if (!navigator.clipboard) {
            return
          }

          let button = document.createElement('button')
          button.className = 'copy-code-btn'
          button.innerHTML = copyIcon
          codeBlock.appendChild(button)

          button.addEventListener('click', async () => {
            await copyCode(codeBlock)
          })
        })
      }
    </script>
  </body>
</html>
