---
const pathname = new URL(Astro.request.url).pathname
const currentPath = pathname.split('/').slice(3).join('').trim()

interface LearnPath {
  title: string
  slug: string
}

export interface Props {
  entries: LearnPath[]
}

const { entries } = Astro.props
---

<nav>
  <ul class='switch'>
    {
      entries.map(
        (entry) =>
          entry.slug && (
            <li>
              <a
                href={entry.slug}
                class:list={[currentPath === entry.slug ? 'current' : null]}
              >
                {entry.title}
              </a>
            </li>
          )
      )
    }
  </ul>
</nav>

<style>
  .switch {
    --sw-radius: var(--radius);
    --sw-padding-block-start: 0.25rem;
    --sw-padding-block-end: 0.5rem;
    --sw-padding-inline: 1rem;

    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    padding: 0;
    margin-block: 0 var(--sp);

    background-color: var(--clr-bg-card);
    border: 1px solid var(--clr-line);
    border-radius: calc(var(--sw-radius) + var(--sw-padding-block-start));

    li {
      list-style: none;
      margin-block: 0;
    }

    a {
      display: block;
      padding-block: var(--sw-padding-block-start) var(--sw-padding-block-end);
      padding-inline: var(--sw-padding-inline);
      border-radius: var(--sw-radius);
      text-decoration: none;
      text-align: center;
      color: var(--clr-text);
      transition: color var(--transition);

      &:hover,
      &:focus {
        color: var(--clr-primary);
      }

      &.current {
        background-color: var(--clr-primary);
        color: var(--clr-inverse);
      }
    }
  }
</style>
