---
interface Props {
  type?: 'button' | 'link'
  label: string
  href?: string
  primary?: boolean
  small?: boolean
  listener?: string
}

const {
  type = 'button',
  label,
  href,
  primary = false,
  small = false,
  listener
}: Props = Astro.props
---

{
  type === 'link' && href ? (
    <a href={href} class:list={['button', { primary: primary === true }]}>
      {label}
    </a>
  ) : (
    <button
      class:list={['button', { primary: primary }, { small: small }]}
      data-listener={listener}
    >
      {label}
    </button>
  )
}

<style lang='scss'>
  .button {
    all: unset;
    cursor: pointer;

    display: inline-flex;
    align-items: center;

    background-color: var(--clr-button);
    color: var(--clr-primary);
    border: 2px solid var(--clr-primary);

    padding-block: var(--sp-xs);
    padding-inline: var(--sp);
    line-height: 1;
    text-decoration: none;
    border-radius: var(--radius);
    box-shadow: 0 0.2em 1em transparent;
    transform: translateY(0);
    transition: all var(--transition-button);

    &:hover,
    &:focus {
      background-color: var(--clr-button-hover);
      border-color: var(--clr-txt);
      box-shadow:
        0 0.2em 1em var(--clr-primary-hover),
        0 0.5em 0.5em -0.6em var(--clr-primary);
      transform: translateY(-0.1em);
    }

    &.small {
      font-size: var(--fs-xs);
      padding-block: 0.3em;
      padding-inline: var(--sp-xs);
      line-height: 1;
    }

    &.primary {
      background-color: var(--clr-primary);
      color: var(--clr-inverse);
      border-color: var(--clr-primary);
    }

    + #{&} {
      margin-inline-start: var(--sp-xs);
    }
  }
</style>
