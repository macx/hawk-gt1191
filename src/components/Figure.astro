---
import type { ImageMetadata } from 'astro'
import { Image } from 'astro:assets'
import { markdown } from '@astropub/md'

interface Props {
  imagePath?: string
  imageFormat?: string
  alt?: string
  caption?: string | boolean
  lazy?: boolean
}

const { imagePath, imageFormat, caption, alt, lazy = true } = Astro.props

let images = undefined
if (imagePath !== undefined) {
  images = import.meta.glob<{ default: ImageMetadata }>(
    '/src/images/**/*.{jpeg,jpg,png}'
  )
  if (!images[imagePath]) {
    throw new Error(
      `Das Bild "${imagePath}" existiert im angegeben Verzeichnis nicht.`
    )
  }
}
---

<figure>
  {
    imagePath !== undefined && images && images[imagePath] ? (
      <Image
        src={
          ((await images[imagePath]()) as { default: ImageMetadata }).default
        }
        widths={[380, 670, 710]}
        sizes={`(max-width: 480px) 380px, (max-width: 800) 670px, 710px`}
        format={imageFormat ? 'png' : undefined}
        alt={alt}
        loading={lazy ? 'lazy' : 'eager'}
      />
    ) : imagePath !== undefined ? (
      <img
        src={imagePath}
        alt={alt}
        loading={lazy ? 'lazy' : 'eager'}
        style='max-width: 100%; height: auto; display: block; margin-inline: auto;'
      />
    ) : null
  }

  <slot />

  {
    caption && typeof caption === 'string' ? (
      <figcaption>{await markdown.inline(caption)}</figcaption>
    ) : null
  }
</figure>

<style lang='scss' is:global>
  @use '../styles/base/mixins';

  figure.beoe {
    @include mixins.media-item();

    img {
      margin-inline: auto;
    }
  }

  figure:not([class]) {
    @include mixins.media-item();

    .expressive-code {
      margin-block-start: 0;
    }

    img {
      display: block;
    }

    img + .expressive-code {
      margin-block-start: var(--sp);
    }

    > figcaption {
      font-size: 0.8em;
      padding-block: 0.5em 1em;
      margin-block-end: 0;
    }

    &:has(> figcaption) {
      padding-block-end: var(--sp) 0;
    }

    > :is(.astro-code) {
      border: 0;

      & + :is(.astro-code, .snippet) {
        margin-block-start: var(--sp);
      }
    }
  }
</style>
