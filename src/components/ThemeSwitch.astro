---
import { Icon } from 'astro-icon/components'
---

<theme-switch>
  <div class='theme-switch' title='Theme'>
    <div class='theme-switch__control'>
      <span class='theme-switch__inputs'>
        <input
          type='radio'
          id='theme-switch-light'
          class='theme-switch__input'
          data-theme-switch
          value='light'
        />
        <label for='theme-switch-light' aria-label='Light theme'>
          <Icon name='theme-light' aria-hidden='true' />
        </label>

        <input
          type='radio'
          id='theme-switch-dark'
          class='theme-switch__input'
          data-theme-switch
          value='dark'
        />
        <label for='theme-switch-dark' aria-label='Dark theme'>
          <Icon name='theme-dark' aria-hidden='true' />
        </label>

        <input
          type='radio'
          id='theme-switch-system'
          class='theme-switch__input'
          data-theme-switch
          value='system'
        />
        <label for='theme-switch-system' aria-label='System theme'>
          <Icon name='material-symbols:monitor-outline' aria-hidden='true' />
        </label>
      </span>
    </div>
  </div>
</theme-switch>

<style lang='scss'>
  @use '../styles/base/mixins';

  .theme-switch {
    --inputs-padding: 0.125rem;
    --icon-radius: 0.5rem;
    --icon-padding-block: 0.25rem;
    --icon-padding-inline: 0.5rem;

    $this: &;
    display: flex;
    align-items: center;

    padding-inline-start: var(--sp-xs);
    block-size: var(--header-height);

    &__inputs {
      position: relative;
      display: flex;
      align-items: center;
      padding: var(--inputs-padding);

      background-color: var(--clr-bg-card);
      border: 1px solid var(--clr-line);
      border-radius: calc(var(--icon-radius) + var(--icon-padding-block));
    }

    label {
      display: block;
      font-size: var(--icon-size-header);
      color: var(--clr-text);
      background-color: transparent;
      padding-block: var(--icon-padding-block);
      padding-inline: var(--icon-padding-inline);
      border-radius: var(--icon-radius);
      cursor: pointer;
      transition: background-color var(--transition);

      &:hover,
      &:focus {
        color: var(--clr-primary);
      }
    }

    &__input {
      position: absolute;
      inset: 0 0 auto auto;
      width: 1px;
      height: 1px;
      clip: rect(0, 0, 0, 0);
      clip-path: inset(100%);
      border: 0;
      white-space: nowrap;

      &:checked + label {
        background-color: var(--clr-primary);
        color: var(--clr-inverse);
      }
    }
  }
</style>

<script>
  class ThemeSwitch extends HTMLElement {
    constructor() {
      super()

      const inputElements = this.querySelectorAll<HTMLInputElement>(
        '[data-theme-switch]'
      )

      if (inputElements.length > 0) {
        const setThemePreference = (newTheme: string): void => {
          const prefersScheme = window.matchMedia(
            '(prefers-color-scheme: dark)'
          ).matches
            ? 'dark'
            : 'light'

          theme.scheme =
            newTheme === 'system' ? prefersScheme : (newTheme as ThemeSchmemes)
          theme.name = newTheme

          localStorage.setItem('theme', theme.name)
        }

        const applyThemeAttributes = (): void => {
          document.documentElement.setAttribute('data-theme', theme.scheme)

          inputElements.forEach((el) => {
            if (theme.name === 'system') {
              el.checked = el.value === 'system' ? true : false
            } else {
              if (el.value === theme.scheme) {
                el.checked = true
              } else {
                el.checked = false
              }
            }
          })
        }

        type ThemeSchmemes = 'light' | 'dark'

        interface Theme {
          name: string
          scheme: ThemeSchmemes
        }

        const theme: Theme = {
          name: localStorage.getItem('theme') || 'system',
          scheme:
            (localStorage
              .getItem('theme')
              ?.match(/light|dark/)?.[0] as ThemeSchmemes) ||
            (window.matchMedia('(prefers-color-scheme: dark)').matches
              ? 'dark'
              : 'light')
        }

        window.onload = () => {
          applyThemeAttributes()

          inputElements.forEach((el) => {
            if (el.value === theme.name) {
              el.checked = true
            } else {
              el.checked = false
            }

            el.addEventListener('change', () => {
              setThemePreference(el.value)
              applyThemeAttributes()
            })
          })
        }

        window
          .matchMedia('(prefers-color-scheme: dark)')
          .addEventListener('change', () => {
            if (theme.name !== 'system') return

            const prefersScheme = window.matchMedia(
              '(prefers-color-scheme: dark)'
            ).matches
              ? 'dark'
              : 'light'

            theme.scheme = prefersScheme as ThemeSchmemes
            applyThemeAttributes()
          })
      }
    }
  }

  customElements.define('theme-switch', ThemeSwitch)
</script>
