---
import { Icon } from "astro-icon/components";
---

<theme-switch>
  <label class="theme-switch">
    <div class="theme-switch__button">
      <input type="checkbox" class="theme-switch__input" data-theme-switch />

      <span class="theme-switch__slider">
        <span class="theme-switch__icon theme-switch__icon--on">
          <Icon name="theme-light" />
        </span>

        <span class="theme-switch__icon theme-switch__icon--off">
          <Icon name="theme-dark" />
        </span>
      </span>
    </div>
  </label>
</theme-switch>

<style lang="scss">
  @use "../styles/base/mixins";

  .theme-switch {
    $this: &;

    position: relative;
    user-select: none;
    block-size: var(--header-height);

    display: flex;
    align-items: center;
    cursor: pointer;
    transition: background-color var(--transition);

    &__input {
      clip: rect(0 0 0 0);
      clip-path: inset(100%);
      height: 1px;
      overflow: hidden;
      position: absolute;
      white-space: nowrap;
      width: 1px;

      &:checked + #{$this}__slider {
        &::after {
          left: calc(100% - 1.4rem - 0.2rem);
        }
      }
    }

    &__button {
      border: 2px solid var(--clr-text);
      border-radius: 4rem;
    }

    &__slider {
      position: relative;
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 4rem;
      padding: 0.3rem 0.6rem;

      &::after {
        content: "";
        position: absolute;
        top: 0.1rem;
        width: 1.4rem;
        height: 1.4rem;
        border-radius: 50%;
        background-color: var(--clr-text);
        transition:
          left var(--transition-theme),
          background-color var(--transition-button);
      }

      html[data-theme="dark"] &::after {
        left: 0.2rem;
      }

      html[data-theme="light"] &::after {
        left: calc(100% - 1.4rem - 0.2rem);
      }
    }

    &__icon {
      display: block;
      width: 1rem;
      height: 1rem;
      fill: var(--clr-text);
    }

    &:hover,
    &:focus-visible {
      #{$this}__slider::after {
        background-color: var(--clr-primary);
      }
    }

    @include mixins.respond("l") {
      padding-inline-start: var(--sp-xs);
    }
  }
</style>

<script>
  class ThemeSwitch extends HTMLElement {
    constructor() {
      super();

      const inputEl = this.querySelector<HTMLInputElement>(
        "[data-theme-switch]",
      );

      if (inputEl) {
        const getThemePreference = (): string => {
          if (localStorage.getItem("theme")) {
            return localStorage.getItem("theme")!;
          } else {
            return window.matchMedia("(prefers-color-scheme: dark)").matches
              ? "dark"
              : "light";
          }
        };

        const setThemePreference = (): void => {
          localStorage.setItem("theme", theme.value);
          applyThemeAttributes();
        };

        const applyThemeAttributes = (): void => {
          document.documentElement.setAttribute("data-theme", theme.value);

          inputEl.checked = theme.value === "dark" ? false : true;
        };

        interface Theme {
          value: string;
        }

        const theme: Theme = {
          value: getThemePreference(),
        };

        applyThemeAttributes();

        window.onload = () => {
          applyThemeAttributes();

          inputEl.addEventListener("change", () => {
            theme.value = theme.value === "light" ? "dark" : "light";
            applyThemeAttributes();
            setThemePreference();
          });
        };

        window
          .matchMedia("(prefers-color-scheme: dark)")
          .addEventListener("change", () => {
            theme.value = theme.value === "dark" ? "dark" : "light";
            setThemePreference();
          });
      }
    }
  }

  customElements.define("theme-switch", ThemeSwitch);
</script>
